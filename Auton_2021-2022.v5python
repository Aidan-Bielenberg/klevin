{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nRight_Wheels_motor_a = Motor(Ports.PORT8, GearSetting.RATIO_18_1, True)\nRight_Wheels_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\nRight_Wheels = MotorGroup(Right_Wheels_motor_a, Right_Wheels_motor_b)\nLeft_Wheels_motor_a = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nLeft_Wheels_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_18_1, False)\nLeft_Wheels = MotorGroup(Left_Wheels_motor_a, Left_Wheels_motor_b)\nArm_motor = Motor(Ports.PORT5, GearSetting.RATIO_18_1, False)\nlift_lock_piston = DigitalOut(brain.three_wire_port.a)\nSwitch = DigitalIn(brain.three_wire_port.b)\nGyroy = Inertial(Ports.PORT10)\nRandl = Motor(Ports.PORT6, GearSetting.RATIO_18_1, True)\nCliff = Motor(Ports.PORT7, GearSetting.RATIO_18_1, False)\nRotney = Rotation(Ports.PORT9, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n#endregion VEXcode Generated Robot Configuration\n\nmyVariable = 0\n\ndef when_started1():\n    global myVariable\n    Lock=1\n    Gyroy.calibrate()\n    wait(4,SECONDS) \n    Right_Wheels.set_stopping(BRAKE)\n    Left_Wheels.set_stopping(BRAKE)\n    Arm_motor.set_velocity(0, PERCENT)\n    Arm_motor.set_max_torque(100, PERCENT)\n    Arm_motor.set_stopping(HOLD)\n    Right_Wheels.set_velocity(0, PERCENT)\n    Left_Wheels.set_velocity(0, PERCENT)\n    Right_Wheels.set_stopping(HOLD)\n    Left_Wheels.set_stopping(HOLD)\n    Randl.set_velocity(0,PERCENT)\n    Cliff.set_max_torque(100,PERCENT)\n    Cliff.set_velocity(0,PERCENT)\n    Cliff.set_stopping(HOLD)\n    Cliff.spin(FORWARD)\n#DRIVER CONTROLS\ndef encoder():\n    while True:\n        if Switch.value() == 0:\n            Arm_motor.set_position(0, DEGREES)\n\n\ndef driving():\n    while True:\n        while abs(controller_1.axis3.position()) > 10 or abs(controller_1.axis4.position()) > 10:\n            Right_Wheels.set_velocity((controller_1.axis3.position() - controller_1.axis4.position()), PERCENT)\n            Left_Wheels.set_velocity((controller_1.axis3.position() + controller_1.axis4.position()), PERCENT)\n            wait(5, MSEC)\n        Right_Wheels.set_velocity(0, PERCENT)\n        Left_Wheels.set_velocity(0, PERCENT)\n\ndef arm_controls():\n    while True:\n        global myVariable\n        while Switch.value() != 0 and int(Arm_motor.position(DEGREES)) < 1920 :\n            if controller_1.buttonR1.pressing():\n                Arm_motor.set_velocity(100,PERCENT)\n            elif controller_1.buttonR2.pressing():\n                Arm_motor.set_velocity(-100,PERCENT)\n            else:\n                Arm_motor.set_velocity(0,PERCENT)\n        while Switch.value() != 0 and int(Arm_motor.position(DEGREES)) >= 1920 :\n            if controller_1.buttonR2.pressing():\n                Arm_motor.set_velocity(-100,PERCENT)\n            else:\n                Arm_motor.set_velocity(0,PERCENT)\n        while Switch.value() == 0:\n            if controller_1.buttonR1.pressing():\n                Arm_motor.set_velocity(100,PERCENT)\n            else:\n                Arm_motor.set_velocity(0,PERCENT)\n\ndef rngl_intake():\n    while True:\n        global myVariable\n        if controller_1.buttonX.pressing():\n            Randl.set_velocity(56,PERCENT)\n        elif controller_1.buttonY.pressing():\n            Randl.set_velocity(-55,PERCENT)\n        else:\n            Randl.set_velocity(0,PERCENT)\n\ndef back_lift():\n    while True:\n        global myVariable\n        if controller_1.buttonL1.pressing():\n            while controller_1.buttonL1.pressing():\n                Cliff.set_velocity(100,PERCENT)\n            Cliff.set_velocity(0,PERCENT)\n        elif controller_1.buttonL2.pressing():\n            while controller_1.buttonL2.pressing():\n                Cliff.set_velocity(-100,PERCENT)\n            Cliff.set_velocity(0,PERCENT)\n        elif controller_1.buttonUp.pressing():\n            while Rotney.position()> 315:\n                Cliff.set_velocity(100,PERCENT)\n            Cliff.set_velocity(0,PERCENT)\n        elif controller_1.buttonDown.pressing():\n            while Rotney.position()< 357:\n                Cliff.set_velocity(-100,PERCENT)\n            Cliff.set_velocity(0,PERCENT)\n\n\ndef lift_lock():\n    while True:\n        global myVariable\n        if controller_1.buttonB.pressing():\n            lift_lock_piston.set(False)\n            Lock=1\n        if controller_1.buttonA.pressing():\n            lift_lock_piston.set(True)\n            Lock=0           \n\n#ATONOMOUS CONTROLS\ndef forward(dist,veloc):\n    Right_Wheels.set_velocity(veloc, PERCENT)\n    Left_Wheels.set_velocity(veloc,PERCENT)\n    Right_Wheels.spin_for(FORWARD, dist, DEGREES, wait=False)\n    Left_Wheels.spin_for(FORWARD, dist, DEGREES, wait=True)\n\ndef forward_dont_wait(dist,veloc):\n    Right_Wheels.set_velocity(veloc, PERCENT)\n    Left_Wheels.set_velocity(veloc,PERCENT)\n    Right_Wheels.spin_for(FORWARD, dist, DEGREES, wait=False)\n    Left_Wheels.spin_for(FORWARD, dist, DEGREES, wait=False)\n\ndef drv_adj(dist,head,veloc,mltp):\n    Left_Wheels.set_position(0, DEGREES)\n    Right_Wheels.set_position(0, DEGREES)\n    if dist > 0:\n        while (Left_Wheels.position(DEGREES) < dist and Right_Wheels.position(DEGREES) < dist):\n            error = head - Gyroy.rotation(DEGREES)\n            output = error * mltp\n            Left_Wheels.set_velocity((veloc + output), PERCENT)\n            Right_Wheels.set_velocity((veloc), PERCENT)\n            Right_Wheels.spin(FORWARD)\n            Left_Wheels.spin(FORWARD)\n        Left_Wheels.stop()\n        Right_Wheels.stop()\n    elif dist < 0:\n        while (Left_Wheels.position(DEGREES) > dist and Right_Wheels.position(DEGREES) > dist):\n            error = head - Gyroy.rotation(DEGREES)\n            output = error * mltp\n            Left_Wheels.set_velocity((veloc * -1) + output, PERCENT)\n            Right_Wheels.set_velocity(veloc * -1 , PERCENT)\n            Right_Wheels.spin(FORWARD)\n            Left_Wheels.spin(FORWARD)\n        Left_Wheels.stop()\n        Right_Wheels.stop()\n\ndef backward(dist2,veloc2):\n    Right_Wheels.set_velocity(veloc2, PERCENT)\n    Left_Wheels.set_velocity(veloc2,PERCENT)\n    Right_Wheels.spin_for(REVERSE, dist2, DEGREES, wait=False)\n    Left_Wheels.spin_for(REVERSE, dist2, DEGREES, wait=True)\n\ndef turn_right(ang,veloc3):\n    while Gyroy.rotation(DEGREES) < int(ang):\n        Right_Wheels.set_velocity(veloc3 * -1,PERCENT)\n        Left_Wheels.set_velocity(veloc3,PERCENT)\n        Right_Wheels.spin(FORWARD)\n        Left_Wheels.spin(FORWARD)\n    Right_Wheels.stop()\n    Left_Wheels.stop()\n\ndef turn_left(ang2,veloc4):\n    while Gyroy.rotation(DEGREES) >= int(ang2):\n        Right_Wheels.set_velocity(veloc4,PERCENT)\n        Left_Wheels.set_velocity(veloc4*-1,PERCENT)\n        Right_Wheels.spin(FORWARD)\n        Left_Wheels.spin(FORWARD)\n    Right_Wheels.stop()\n    Left_Wheels.stop()\n\ndef aton_lift(rot,veloc5):\n    Arm_motor.set_velocity(veloc5,PERCENT,)\n    Arm_motor.spin_for(FORWARD,rot,TURNS,)\n\ndef lift_zero(veloc):\n    while Switch.value()==1:\n        Arm_motor.set_velocity(veloc,PERCENT)\n        Arm_motor.spin(REVERSE)\n    Arm_motor.stop()\n\ndef aton_lock(up):\n    if up==1:\n        lift_lock_piston.set(True)\n    if up==0:\n        lift_lock_piston.set(False)\n\ndef aton_cliff(ang):\n    if ang < Rotney.position(DEGREES):\n        Cliff.set_velocity(100,PERCENT)\n        while ang < Rotney.position(DEGREES):\n            wait(0.001,SECONDS)\n        Cliff.set_velocity(0,PERCENT)\n        \n    elif ang > Rotney.position(DEGREES):\n        Cliff.set_velocity(-100,PERCENT)\n        while ang > Rotney.position(DEGREES):\n            wait(0.001,SECONDS)\n        Cliff.set_velocity(0,PERCENT)\n    \n\ndef aton_randl(rot,veloc):\n    Randl.set_velocity(veloc,PERCENT,)\n    Randl.spin_for(FORWARD,rot,TURNS,)  \n\n#CRUCIAL PROGRAMS\ndef display():\n    while True:\n        controller_1.screen.clear_screen()\n        controller_1.screen.set_cursor(0,0)\n        controller_1.screen.print(Gyroy.heading(DEGREES))\n        controller_1.screen.set_cursor(2,0)\n        controller_1.screen.print(Rotney.position(DEGREES))\n\ndef aton_sequence():\n    aton_lift(.5, 100)\n    aton_cliff(357)\n    wait(.2,SECONDS)\n    drv_adj(-300, 0, 40, 1)\n    wait(.2,SECONDS)\n    aton_cliff(313)\n    wait(.2,SECONDS)\n    drv_adj(1000,90,20,2)\n    turn_right(104,20)\n    wait(.2,SECONDS)\n    lift_zero(100)\n    drv_adj(1250,115,50,0)\n    wait(.1,SECONDS)\n    aton_lock(1)\n    aton_lift(2,100)\n    wait(.1,SECONDS)\n    drv_adj(-1100,110,50,1)\n    wait(.1,SECONDS)\n    turn_right(171,20)\n    wait(.05,SECONDS)\n    drv_adj(1250,170,75,2)\n    aton_lift(3.3,100)\n    turn_right(240,30)\n    forward(90,90)\n    aton_lock(0)\n    wait(.3,SECONDS)\n    backward(150, 50)\n    drv_adj(-1900,287,75,2)\n\n    \n\n\ndef driv_contr():\n    pass\n\n\ncomp=Competition(driv_contr, aton_sequence)\ndisp=Thread(display)\nwhen_started1()\n","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[8,2],"name":"Right_Wheels","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[3,4],"name":"Left_Wheels","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[5],"name":"Arm_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[1],"name":"lift_lock_piston","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[2],"name":"Switch","customName":true,"deviceType":"DigitalIn","deviceClass":"digital_in","setting":{"id":"partner"},"triportSourcePort":22},{"port":[10],"name":"Gyroy","customName":true,"deviceType":"Inertial","deviceClass":"inertial","setting":{"id":"partner"},"triportSourcePort":22},{"port":[6],"name":"Randl","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[7],"name":"Cliff","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[9],"name":"Rotney","customName":true,"deviceType":"Rotation","deviceClass":"rotation","setting":{"reversed":"false","id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20211013.15.00.00","appVersion":"2.2.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}